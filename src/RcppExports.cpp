// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// construct_ADchol_Rcpp
List construct_ADchol_Rcpp(SEXP U, const List& P_list);
RcppExport SEXP _LMMsolver_construct_ADchol_Rcpp(SEXP USEXP, SEXP P_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type U(USEXP);
    Rcpp::traits::input_parameter< const List& >::type P_list(P_listSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_ADchol_Rcpp(U, P_list));
    return rcpp_result_gen;
END_RCPP
}
// logdet
double logdet(SEXP arg, NumericVector lambda);
RcppExport SEXP _LMMsolver_logdet(SEXP argSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type arg(argSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(logdet(arg, lambda));
    return rcpp_result_gen;
END_RCPP
}
// dlogdet
NumericVector dlogdet(SEXP ADobj, NumericVector theta, Nullable<NumericVector> b_);
RcppExport SEXP _LMMsolver_dlogdet(SEXP ADobjSEXP, SEXP thetaSEXP, SEXP b_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ADobj(ADobjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type b_(b_SEXP);
    rcpp_result_gen = Rcpp::wrap(dlogdet(ADobj, theta, b_));
    return rcpp_result_gen;
END_RCPP
}
// partialDerivCholesky
NumericVector partialDerivCholesky(SEXP cholC);
RcppExport SEXP _LMMsolver_partialDerivCholesky(SEXP cholCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type cholC(cholCSEXP);
    rcpp_result_gen = Rcpp::wrap(partialDerivCholesky(cholC));
    return rcpp_result_gen;
END_RCPP
}
// diagXCinvXt
NumericVector diagXCinvXt(SEXP cholC, SEXP transposeX);
RcppExport SEXP _LMMsolver_diagXCinvXt(SEXP cholCSEXP, SEXP transposeXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type cholC(cholCSEXP);
    Rcpp::traits::input_parameter< SEXP >::type transposeX(transposeXSEXP);
    rcpp_result_gen = Rcpp::wrap(diagXCinvXt(cholC, transposeX));
    return rcpp_result_gen;
END_RCPP
}
// ForwardCholesky
NumericVector ForwardCholesky(SEXP cholC, NumericVector& b);
RcppExport SEXP _LMMsolver_ForwardCholesky(SEXP cholCSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type cholC(cholCSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(ForwardCholesky(cholC, b));
    return rcpp_result_gen;
END_RCPP
}
// BackwardCholesky
NumericVector BackwardCholesky(SEXP cholC, NumericVector& b);
RcppExport SEXP _LMMsolver_BackwardCholesky(SEXP cholCSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type cholC(cholCSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(BackwardCholesky(cholC, b));
    return rcpp_result_gen;
END_RCPP
}
// RowKron
List RowKron(SEXP sX1, SEXP sX2);
RcppExport SEXP _LMMsolver_RowKron(SEXP sX1SEXP, SEXP sX2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sX1(sX1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sX2(sX2SEXP);
    rcpp_result_gen = Rcpp::wrap(RowKron(sX1, sX2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LMMsolver_construct_ADchol_Rcpp", (DL_FUNC) &_LMMsolver_construct_ADchol_Rcpp, 2},
    {"_LMMsolver_logdet", (DL_FUNC) &_LMMsolver_logdet, 2},
    {"_LMMsolver_dlogdet", (DL_FUNC) &_LMMsolver_dlogdet, 3},
    {"_LMMsolver_partialDerivCholesky", (DL_FUNC) &_LMMsolver_partialDerivCholesky, 1},
    {"_LMMsolver_diagXCinvXt", (DL_FUNC) &_LMMsolver_diagXCinvXt, 2},
    {"_LMMsolver_ForwardCholesky", (DL_FUNC) &_LMMsolver_ForwardCholesky, 2},
    {"_LMMsolver_BackwardCholesky", (DL_FUNC) &_LMMsolver_BackwardCholesky, 2},
    {"_LMMsolver_RowKron", (DL_FUNC) &_LMMsolver_RowKron, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_LMMsolver(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
