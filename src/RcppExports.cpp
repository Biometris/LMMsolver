// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cholesky
NumericVector cholesky(NumericVector L, const IntegerVector& colpointers, const IntegerVector& rowindices);
RcppExport SEXP _LMMsolver_cholesky(SEXP LSEXP, SEXP colpointersSEXP, SEXP rowindicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type L(LSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colpointers(colpointersSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowindices(rowindicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cholesky(L, colpointers, rowindices));
    return rcpp_result_gen;
END_RCPP
}
// logdet
double logdet(SEXP arg, NumericVector lambda);
RcppExport SEXP _LMMsolver_logdet(SEXP argSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type arg(argSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(logdet(arg, lambda));
    return rcpp_result_gen;
END_RCPP
}
// dlogdet
NumericVector dlogdet(SEXP arg, NumericVector lambda);
RcppExport SEXP _LMMsolver_dlogdet(SEXP argSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type arg(argSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(dlogdet(arg, lambda));
    return rcpp_result_gen;
END_RCPP
}
// construct_ADchol_Rcpp
List construct_ADchol_Rcpp(SEXP U, const List& P_list);
RcppExport SEXP _LMMsolver_construct_ADchol_Rcpp(SEXP USEXP, SEXP P_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type U(USEXP);
    Rcpp::traits::input_parameter< const List& >::type P_list(P_listSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_ADchol_Rcpp(U, P_list));
    return rcpp_result_gen;
END_RCPP
}
// RowKronecker
arma::mat RowKronecker(const arma::mat& X1, const arma::mat& X2);
RcppExport SEXP _LMMsolver_RowKronecker(SEXP X1SEXP, SEXP X2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    rcpp_result_gen = Rcpp::wrap(RowKronecker(X1, X2));
    return rcpp_result_gen;
END_RCPP
}
// calcUsc
arma::mat calcUsc(const double& q, const double& ord);
RcppExport SEXP _LMMsolver_calcUsc(SEXP qSEXP, SEXP ordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double& >::type ord(ordSEXP);
    rcpp_result_gen = Rcpp::wrap(calcUsc(q, ord));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LMMsolver_cholesky", (DL_FUNC) &_LMMsolver_cholesky, 3},
    {"_LMMsolver_logdet", (DL_FUNC) &_LMMsolver_logdet, 2},
    {"_LMMsolver_dlogdet", (DL_FUNC) &_LMMsolver_dlogdet, 2},
    {"_LMMsolver_construct_ADchol_Rcpp", (DL_FUNC) &_LMMsolver_construct_ADchol_Rcpp, 2},
    {"_LMMsolver_RowKronecker", (DL_FUNC) &_LMMsolver_RowKronecker, 2},
    {"_LMMsolver_calcUsc", (DL_FUNC) &_LMMsolver_calcUsc, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_LMMsolver(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
