// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// construct_ADchol_Rcpp
List construct_ADchol_Rcpp(SEXP U, const List& P_list);
RcppExport SEXP _LMMsolver_construct_ADchol_Rcpp(SEXP USEXP, SEXP P_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type U(USEXP);
    Rcpp::traits::input_parameter< const List& >::type P_list(P_listSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_ADchol_Rcpp(U, P_list));
    return rcpp_result_gen;
END_RCPP
}
// logdet
double logdet(SEXP arg, NumericVector lambda);
RcppExport SEXP _LMMsolver_logdet(SEXP argSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type arg(argSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(logdet(arg, lambda));
    return rcpp_result_gen;
END_RCPP
}
// dlogdet
NumericVector dlogdet(SEXP arg, NumericVector theta);
RcppExport SEXP _LMMsolver_dlogdet(SEXP argSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type arg(argSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(dlogdet(arg, theta));
    return rcpp_result_gen;
END_RCPP
}
// partialDerivCholesky
NumericVector partialDerivCholesky(SEXP cholC);
RcppExport SEXP _LMMsolver_partialDerivCholesky(SEXP cholCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type cholC(cholCSEXP);
    rcpp_result_gen = Rcpp::wrap(partialDerivCholesky(cholC));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LMMsolver_construct_ADchol_Rcpp", (DL_FUNC) &_LMMsolver_construct_ADchol_Rcpp, 2},
    {"_LMMsolver_logdet", (DL_FUNC) &_LMMsolver_logdet, 2},
    {"_LMMsolver_dlogdet", (DL_FUNC) &_LMMsolver_dlogdet, 2},
    {"_LMMsolver_partialDerivCholesky", (DL_FUNC) &_LMMsolver_partialDerivCholesky, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_LMMsolver(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
